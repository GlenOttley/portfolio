{"ast":null,"code":"import React from 'react';\nimport GoogleRecaptcha from 'react-google-recaptcha';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar NetlifyFormContext = React.createContext();\nNetlifyFormContext.displayName = 'NetlifyFormContext';\n\nvar NetlifyFormProvider = function NetlifyFormProvider(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  return /*#__PURE__*/React.createElement(NetlifyFormContext.Provider, {\n    value: _extends({}, props)\n  }, children);\n};\n\nfunction useNetlifyFormContext() {\n  return React.useContext(NetlifyFormContext);\n}\n\nvar Honeypot = function Honeypot(_ref) {\n  var _ref$label = _ref.label,\n      label = _ref$label === void 0 ? \"Leave the following field empty:\" : _ref$label,\n      props = _objectWithoutPropertiesLoose(_ref, [\"label\"]);\n\n  var _useNetlifyFormContex = useNetlifyFormContext(),\n      handleChange = _useNetlifyFormContex.handleChange,\n      honeypotName = _useNetlifyFormContex.honeypotName;\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    hidden: true\n  }, /*#__PURE__*/React.createElement(\"label\", null, label, ' ', /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\"\n  }, props, {\n    name: honeypotName,\n    onChange: handleChange\n  }))));\n};\n\nvar encodeFormData = function encodeFormData(data) {\n  var formData = new FormData();\n\n  for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    formData.append(key, data[key]);\n  }\n\n  return formData;\n};\n\nvar isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\n\nvar isEmptyChildren = function isEmptyChildren(x) {\n  return React.Children.count(x) === 0;\n};\n\nfunction NetlifyFormReducer(state, action) {\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case 'CHANGE_FORM_DATA':\n      {\n        var _extends2;\n\n        var name = payload.name,\n            value = payload.value,\n            _type = payload.type;\n        return _extends(_extends({}, state), {}, {\n          values: _extends(_extends({}, state.values), {}, (_extends2 = {}, _extends2[name] = _type !== 'checkbox' ? value : payload.checked, _extends2))\n        });\n      }\n\n    case 'RESET_FORM':\n      {\n        var initialData = payload;\n        return _extends(_extends({}, state), {}, {\n          values: initialData\n        });\n      }\n\n    case 'SET_SUCCESS':\n      return _extends(_extends({}, state), {}, {\n        success: true,\n        error: false,\n        submitting: false,\n        submitted: true\n      });\n\n    case 'SET_ERROR':\n      return _extends(_extends({}, state), {}, {\n        success: false,\n        error: true,\n        submitting: false\n      });\n\n    case 'SET_SUBMITTING':\n      return _extends(_extends({}, state), {}, {\n        submitting: true\n      });\n\n    case 'SET_HONEYPOT_NAME':\n      return _extends(_extends({}, state), {}, {\n        honeypotName: payload\n      });\n\n    case 'ENABLE_RECAPTCHA':\n      return _extends(_extends({}, state), {}, {\n        recaptchaEnabled: payload\n      });\n\n    default:\n      throw new Error(\"Action type \\\"\" + type + \"\\\" is not defined.\");\n  }\n}\n\nvar NetlifyFormComponent = function NetlifyFormComponent(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  var context = useNetlifyFormContext();\n  var formRef = context.formRef,\n      formName = context.formName,\n      formAction = context.formAction,\n      honeypotName = context.honeypotName,\n      recaptchaEnabled = context.recaptchaEnabled,\n      handleSubmit = context.handleSubmit,\n      handleReset = context.handleReset;\n  var netlifyProps = {};\n\n  if (honeypotName) {\n    netlifyProps['data-netlify-honeypot'] = honeypotName;\n  }\n\n  if (recaptchaEnabled) {\n    netlifyProps['data-netlify-recaptcha'] = true;\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: formRef,\n    method: \"post\",\n    name: formName,\n    action: formAction,\n    onSubmit: handleSubmit,\n    onReset: handleReset,\n    \"data-netlify\": true\n  }, netlifyProps, props), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"form-name\",\n    value: formName\n  }), children ? isFunction(children) ? children(context) : !isEmptyChildren(children) ? children : null : null);\n};\n\nvar useNetlifyForm = function useNetlifyForm(_ref) {\n  var _ref$name = _ref.name,\n      name = _ref$name === void 0 ? 'Form' : _ref$name,\n      _ref$action = _ref.action,\n      action = _ref$action === void 0 ? '' : _ref$action,\n      _ref$honeypotName = _ref.honeypotName,\n      honeypotName = _ref$honeypotName === void 0 ? '' : _ref$honeypotName,\n      _ref$enableRecaptcha = _ref.enableRecaptcha,\n      enableRecaptcha = _ref$enableRecaptcha === void 0 ? false : _ref$enableRecaptcha,\n      _ref$onSuccess = _ref.onSuccess,\n      onSuccess = _ref$onSuccess === void 0 ? function () {} : _ref$onSuccess,\n      _ref$onFailure = _ref.onFailure,\n      onFailure = _ref$onFailure === void 0 ? function () {} : _ref$onFailure;\n  var initialValues = {};\n  var initialState = {\n    success: false,\n    error: false,\n    submitting: false,\n    submitted: false,\n    response: null,\n    values: initialValues,\n    formName: name,\n    formAction: action,\n    honeypotName: honeypotName,\n    recaptchaEnabled: enableRecaptcha,\n    recaptchaInvisible: false\n  };\n\n  var _React$useReducer = React.useReducer(NetlifyFormReducer, initialState),\n      state = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  var formRef = React.useRef(null);\n  var recaptchaRef = React.useRef(null);\n\n  var handleChange = function handleChange(_ref2) {\n    var _ref2$target = _ref2.target,\n        name = _ref2$target.name,\n        value = _ref2$target.value,\n        files = _ref2$target.files;\n    dispatch({\n      type: 'CHANGE_FORM_DATA',\n      payload: files != null && files.length > 0 ? {\n        name: name,\n        value: files[0]\n      } : {\n        name: name,\n        value: value\n      }\n    });\n  };\n\n  var handleReset = function handleReset() {\n    dispatch({\n      type: 'RESET_FORM',\n      payload: initialValues\n    });\n  };\n\n  var handleSubmit = function handleSubmit(event, values) {\n    if (event === void 0) {\n      event = null;\n    }\n\n    if (values === void 0) {\n      values = {};\n    }\n\n    try {\n      var _temp4 = function _temp4(_result) {\n        if (_exit2) return _result;\n        dispatch({\n          type: 'SET_SUBMITTING'\n        });\n        return Promise.resolve(fetch('/', {\n          method: 'POST',\n          body: encodeFormData(formData)\n        })).then(function (response) {\n          var context = {\n            state: state,\n            formRef: formRef,\n            recaptchaRef: recaptchaRef\n          };\n\n          if (response.status !== 200) {\n            dispatch({\n              type: 'SET_ERROR'\n            });\n            return onFailure(response, context);\n          }\n\n          dispatch({\n            type: 'SET_SUCCESS'\n          });\n          return onSuccess(response, context);\n        });\n      };\n\n      var _exit2 = false;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      var formData = _extends(_extends({\n        'form-name': state.formName\n      }, values), state.values);\n\n      var _temp5 = function () {\n        if (state.recaptchaEnabled) {\n          var _temp6 = function _temp6(recaptchaValue) {\n            formData['g-recaptcha-response'] = recaptchaValue;\n          };\n\n          if (recaptchaRef.current === null) {\n            throw new Error('reCAPTCHA is enabled but reference not found, make sure you render the reCAPTCHA-component somewhere.');\n          }\n\n          var isRecaptchaInvisible = recaptchaRef.current.props.size === 'invisible';\n          return isRecaptchaInvisible ? Promise.resolve(recaptchaRef.current.executeAsync()).then(_temp6) : _temp6(recaptchaRef.current.getValue());\n        }\n      }();\n\n      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var setHoneypotName = React.useCallback(function (ref) {\n    return dispatch({\n      type: 'SET_HONEYPOT_NAME',\n      payload: ref\n    });\n  }, []);\n  var enableRecaptchaHandler = React.useCallback(function (enable) {\n    return dispatch({\n      type: 'ENABLE_RECAPTCHA',\n      payload: enable\n    });\n  }, []);\n  return _extends(_extends({}, state), {}, {\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    handleReset: handleReset,\n    setHoneypotName: setHoneypotName,\n    enableRecaptcha: enableRecaptchaHandler,\n    formRef: formRef,\n    recaptchaRef: recaptchaRef\n  });\n};\n\nvar NetlifyForm = function NetlifyForm(_ref3) {\n  var children = _ref3.children,\n      formProps = _ref3.formProps,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"children\", \"formProps\"]);\n\n  var context = useNetlifyForm(props);\n  return /*#__PURE__*/React.createElement(NetlifyFormProvider, context, /*#__PURE__*/React.createElement(NetlifyFormComponent, formProps, children));\n};\n\nvar Recaptcha = function Recaptcha(_ref) {\n  var _ref$siteKey = _ref.siteKey,\n      siteKey = _ref$siteKey === void 0 ? '' : _ref$siteKey,\n      _ref$invisible = _ref.invisible,\n      invisible = _ref$invisible === void 0 ? false : _ref$invisible,\n      passThroughProps = _objectWithoutPropertiesLoose(_ref, [\"siteKey\", \"invisible\"]);\n\n  var _useNetlifyFormContex = useNetlifyFormContext(),\n      recaptchaRef = _useNetlifyFormContex.recaptchaRef;\n\n  return /*#__PURE__*/React.createElement(GoogleRecaptcha, _extends({}, passThroughProps, {\n    sitekey: siteKey,\n    ref: recaptchaRef\n  }, invisible ? {\n    size: 'invisible'\n  } : {}));\n};\n\nexport { Honeypot, NetlifyForm, NetlifyFormComponent, NetlifyFormContext, NetlifyFormProvider, Recaptcha, useNetlifyForm, useNetlifyFormContext };","map":{"version":3,"sources":["../src/netlify-form-context.js","../src/honeypot.js","../src/utils.js","../src/netlify-form-reducer.js","../src/netlify-form-component.js","../src/netlify-form.js","../src/recaptcha.js"],"names":["NetlifyFormContext","React","NetlifyFormProvider","children","props","Honeypot","label","handleChange","honeypotName","useNetlifyFormContext","encodeFormData","formData","key","Object","data","isFunction","isEmptyChildren","type","payload","action","name","value","values","state","initialData","success","error","submitting","submitted","recaptchaEnabled","NetlifyFormComponent","context","formRef","formName","formAction","handleSubmit","handleReset","netlifyProps","useNetlifyForm","enableRecaptcha","onSuccess","onFailure","initialValues","initialState","response","recaptchaInvisible","dispatch","recaptchaRef","target","files","event","isRecaptchaInvisible","fetch","method","body","setHoneypotName","ref","enableRecaptchaHandler","enable","NetlifyForm","formProps","Recaptcha","siteKey","invisible","passThroughProps","size"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport const NetlifyFormContext = React.createContext()\nNetlifyFormContext.displayName = 'NetlifyFormContext'\n\nexport const NetlifyFormProvider = ({ children, ...props }) => (\n  <NetlifyFormContext.Provider value={{ ...props }}>\n    {children}\n  </NetlifyFormContext.Provider>\n)\n\nexport function useNetlifyFormContext() {\n  return React.useContext(NetlifyFormContext)\n}\n","import React from 'react'\nimport { useNetlifyFormContext } from './netlify-form-context'\n\nexport const Honeypot = ({\n  label = `Leave the following field empty:`,\n  ...props\n}) => {\n  const { handleChange, honeypotName } = useNetlifyFormContext()\n\n  return (\n    <p hidden>\n      <label>\n        {label}{' '}\n        <input\n          type='text'\n          {...props}\n          name={honeypotName}\n          onChange={handleChange}\n        />\n      </label>\n    </p>\n  )\n}\n","import React from 'react'\n\nexport const encodeFormData = (data) => {\n  const formData = new FormData()\n\n  for (const key of Object.keys(data)) {\n    formData.append(key, data[key])\n  }\n\n  return formData\n}\n\nexport const isFunction = (x) => typeof x === 'function'\n\nexport const isEmptyChildren = (x) => React.Children.count(x) === 0\n","export default function (state, action) {\n  const { type, payload } = action\n  switch (type) {\n    case 'CHANGE_FORM_DATA': {\n      const { name, value, type } = payload\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          [name]: type !== 'checkbox' ? value : payload.checked\n        }\n      }\n    }\n    case 'RESET_FORM': {\n      const initialData = payload\n      return {\n        ...state,\n        values: initialData\n      }\n    }\n    case 'SET_SUCCESS':\n      return {\n        ...state,\n        success: true,\n        error: false,\n        submitting: false,\n        submitted: true\n      }\n    case 'SET_ERROR':\n      return { ...state, success: false, error: true, submitting: false }\n    case 'SET_SUBMITTING':\n      return { ...state, submitting: true }\n    case 'SET_HONEYPOT_NAME':\n      return { ...state, honeypotName: payload }\n    case 'ENABLE_RECAPTCHA':\n      return { ...state, recaptchaEnabled: payload }\n    default:\n      throw new Error(`Action type \"${type}\" is not defined.`)\n  }\n}\n","import React from 'react'\nimport { isFunction, isEmptyChildren } from './utils'\nimport { useNetlifyFormContext } from './netlify-form-context'\n\nexport const NetlifyFormComponent = ({ children, ...props }) => {\n  const context = useNetlifyFormContext()\n  const {\n    formRef,\n    formName,\n    formAction,\n    honeypotName,\n    recaptchaEnabled,\n    handleSubmit,\n    handleReset\n  } = context\n\n  const netlifyProps = {}\n  if (honeypotName) {\n    netlifyProps['data-netlify-honeypot'] = honeypotName\n  }\n  if (recaptchaEnabled) {\n    netlifyProps['data-netlify-recaptcha'] = true\n  }\n\n  return (\n    <form\n      ref={formRef}\n      method='post'\n      name={formName}\n      action={formAction}\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n      data-netlify\n      {...netlifyProps}\n      {...props}\n    >\n      {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\n      <input type='hidden' name='form-name' value={formName} />\n\n      {children\n        ? isFunction(children)\n          ? children(context)\n          : !isEmptyChildren(children)\n          ? children\n          : null\n        : null}\n    </form>\n  )\n}\n","import React from 'react'\nimport { encodeFormData } from './utils'\nimport NetlifyFormReducer from './netlify-form-reducer'\nimport { NetlifyFormProvider } from './netlify-form-context'\nimport { NetlifyFormComponent } from './netlify-form-component'\n\nexport const useNetlifyForm = ({\n  name = 'Form',\n  action = '',\n  honeypotName = '',\n  enableRecaptcha = false,\n  onSuccess = () => {},\n  onFailure = () => {}\n}) => {\n  const initialValues = {}\n  const initialState = {\n    success: false,\n    error: false,\n    submitting: false,\n    submitted: false,\n    response: null,\n    values: initialValues,\n    formName: name,\n    formAction: action,\n    honeypotName,\n    recaptchaEnabled: enableRecaptcha,\n    recaptchaInvisible: false\n  }\n  const [state, dispatch] = React.useReducer(NetlifyFormReducer, initialState)\n  const formRef = React.useRef(null)\n  const recaptchaRef = React.useRef(null)\n\n  const handleChange = ({ target: { name, value, files } }) => {\n    dispatch({\n      type: 'CHANGE_FORM_DATA',\n      payload:\n        files != null && files.length > 0\n          ? { name, value: files[0] }\n          : { name, value }\n    })\n  }\n  const handleReset = () => {\n    dispatch({\n      type: 'RESET_FORM',\n      payload: initialValues\n    })\n  }\n  const handleSubmit = async (event = null, values = {}) => {\n    if (event) {\n      event.preventDefault()\n    }\n\n    const formData = {\n      'form-name': state.formName,\n      ...values,\n      ...state.values\n    }\n\n    if (state.recaptchaEnabled) {\n      if (recaptchaRef.current === null) {\n        throw new Error(\n          'reCAPTCHA is enabled but reference not found, make sure you render the reCAPTCHA-component somewhere.'\n        )\n      }\n      const isRecaptchaInvisible =\n        recaptchaRef.current.props.size === 'invisible'\n      const recaptchaValue = isRecaptchaInvisible\n        ? await recaptchaRef.current.executeAsync()\n        : recaptchaRef.current.getValue()\n\n      formData['g-recaptcha-response'] = recaptchaValue\n    }\n\n    dispatch({ type: 'SET_SUBMITTING' })\n\n    const response = await fetch('/', {\n      method: 'POST',\n      body: encodeFormData(formData)\n    })\n    const context = { state, formRef, recaptchaRef }\n    if (response.status !== 200) {\n      dispatch({ type: 'SET_ERROR' })\n      return onFailure(response, context)\n    }\n    dispatch({ type: 'SET_SUCCESS' })\n    return onSuccess(response, context)\n  }\n  const setHoneypotName = React.useCallback((ref) => {\n    return dispatch({ type: 'SET_HONEYPOT_NAME', payload: ref })\n  }, [])\n  const enableRecaptchaHandler = React.useCallback((enable) => {\n    return dispatch({ type: 'ENABLE_RECAPTCHA', payload: enable })\n  }, [])\n\n  return {\n    ...state,\n    // add additional handlers for access through context:\n    handleChange,\n    handleSubmit,\n    handleReset,\n    setHoneypotName,\n    enableRecaptcha: enableRecaptchaHandler,\n    // references:\n    formRef,\n    recaptchaRef\n  }\n}\n\nexport const NetlifyForm = ({ children, formProps, ...props }) => {\n  const context = useNetlifyForm(props)\n\n  return (\n    <NetlifyFormProvider {...context}>\n      <NetlifyFormComponent {...formProps}>{children}</NetlifyFormComponent>\n    </NetlifyFormProvider>\n  )\n}\n","import React from 'react'\nimport { useNetlifyFormContext } from './netlify-form-context'\nimport GoogleRecaptcha from 'react-google-recaptcha'\n\nexport const Recaptcha = ({\n  siteKey = '',\n  invisible = false,\n  ...passThroughProps\n}) => {\n  const { recaptchaRef } = useNetlifyFormContext()\n\n  return (\n    <GoogleRecaptcha\n      {...passThroughProps}\n      sitekey={siteKey}\n      ref={recaptchaRef}\n      {...(invisible ? { size: 'invisible' } : {})}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}